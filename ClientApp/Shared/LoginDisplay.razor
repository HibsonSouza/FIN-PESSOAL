@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<AuthorizeView>
    <Authorized>
        <MudMenu Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true">
            <MudMenuItem>
                <MudText>No new notifications</MudText>
            </MudMenuItem>
        </MudMenu>
        <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <ActivatorContent>
                <MudAvatar Class="ml-3 cursor-pointer">
                    @if (string.IsNullOrEmpty(UserInitials))
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Person" />
                    }
                    else
                    {
                        @UserInitials
                    }
                </MudAvatar>
            </ActivatorContent>
            <ChildContent>
                <MudText Typo="Typo.body2" Class="px-4 py-2">@UserName</MudText>
                <MudDivider />
                <MudMenuItem Href="/settings/profile">Profile</MudMenuItem>
                <MudMenuItem Href="/settings">Settings</MudMenuItem>
                <MudDivider />
                <MudMenuItem OnClick="LogoutAsync">Logout</MudMenuItem>
            </ChildContent>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="/login">Login</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Inherit" Class="ml-2" Href="/register">Register</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string UserName { get; set; } = "";
    private string UserInitials { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity.IsAuthenticated)
        {
            UserName = user.FindFirst(c => c.Type == "name")?.Value ?? user.Identity.Name;
            
            if (!string.IsNullOrEmpty(UserName))
            {
                var nameParts = UserName.Split(' ');
                if (nameParts.Length > 1)
                {
                    UserInitials = $"{nameParts[0][0]}{nameParts[^1][0]}";
                }
                else if (nameParts.Length == 1 && nameParts[0].Length > 0)
                {
                    UserInitials = nameParts[0][0].ToString();
                }
            }
        }
    }

    private async Task LogoutAsync()
    {
        var result = await AuthService.LogoutAsync();
        
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Snackbar.Add("Failed to logout. Please try again.", Severity.Error);
        }
    }
}
