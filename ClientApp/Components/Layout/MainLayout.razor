@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="1">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" 
                               OnClick="@((e) => DrawerToggle())" />
                
                <MudText Typo="Typo.h6" Class="ml-3">Gerenciador Financeiro</MudText>
                <MudSpacer />
                
                <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Dense="true" Direction="Direction.Bottom">
                    <MudMenuItem OnClick="@ToggleTheme">
                        <div class="d-flex">
                            <MudIcon Icon="@(_isDarkMode ? Icons.Material.Filled.WbSunny : Icons.Material.Filled.ModeNight)" 
                                    Class="mr-2" />
                            <span>@(_isDarkMode ? "Tema Claro" : "Tema Escuro")</span>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/perfil"))">
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
                            <span>Meu Perfil</span>
                        </div>
                    </MudMenuItem>
                    <MudDivider />
                    <MudMenuItem OnClick="@HandleLogout">
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Logout" Class="mr-2" />
                            <span>Sair</span>
                        </div>
                    </MudMenuItem>
                </MudMenu>
            </MudAppBar>
            
            <MudDrawer @bind-Open="_drawerOpen" Elevation="2" ClipMode="DrawerClipMode.Always" Variant="@DrawerVariant.Mini">
                <NavMenu />
            </MudDrawer>
            
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.Large" Class="pa-6">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <MudLayout>
            <MudMainContent>
                @Body
            </MudMainContent>
        </MudLayout>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private ClaimsPrincipal _user = new();
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;
        
        if (_user.Identity?.IsAuthenticated == true)
        {
            var themeClaim = _user.FindFirst("theme");
            if (themeClaim != null && themeClaim.Value == "dark")
            {
                _isDarkMode = true;
            }
        }
    }
    
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    private void ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
    }
    
    private async Task HandleLogout()
    {
        var result = await AuthService.Logout();
        
        if (result)
        {
            Snackbar.Add("VocÃª foi desconectado com sucesso", Severity.Success);
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Snackbar.Add("Erro ao desconectar", Severity.Error);
        }
    }
}