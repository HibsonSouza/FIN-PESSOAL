@page "/"
@inject IDashboardService DashboardService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Dashboard - Gerenciador Financeiro</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Dashboard Financeiro</MudText>

    @if (_isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
    }
    else
    {
        <MudGrid>
            <!-- Saldo Total -->
            <MudItem xs="12" md="4">
                <MudPaper Elevation="2" Class="pa-4 finance-card">
                    <MudText Typo="Typo.subtitle1">Saldo Total</MudText>
                    <MudText Typo="Typo.h5" Color="@(_summary.TotalBalance >= 0 ? Color.Success : Color.Error)">
                        @_summary.TotalBalance.ToString("C", CultureInfo.GetCultureInfo("pt-BR"))
                    </MudText>
                    <MudText Typo="Typo.caption">Atualizado em @DateTime.Now.ToString("dd/MM/yyyy HH:mm")</MudText>
                </MudPaper>
            </MudItem>

            <!-- Receitas do Mês -->
            <MudItem xs="12" md="4">
                <MudPaper Elevation="2" Class="pa-4 finance-card">
                    <MudText Typo="Typo.subtitle1">Receitas do Mês</MudText>
                    <MudText Typo="Typo.h5" Color="Color.Success">
                        @_summary.MonthlyIncome.ToString("C", CultureInfo.GetCultureInfo("pt-BR"))
                    </MudText>
                    <MudText Typo="Typo.caption">
                        @if (_summary.IncomeChange >= 0)
                        {
                            <span style="color: green">+@_summary.IncomeChange.ToString("F1")%</span>
                        }
                        else
                        {
                            <span style="color: red">@_summary.IncomeChange.ToString("F1")%</span>
                        }
                        <span> em relação ao mês anterior</span>
                    </MudText>
                </MudPaper>
            </MudItem>

            <!-- Despesas do Mês -->
            <MudItem xs="12" md="4">
                <MudPaper Elevation="2" Class="pa-4 finance-card">
                    <MudText Typo="Typo.subtitle1">Despesas do Mês</MudText>
                    <MudText Typo="Typo.h5" Color="Color.Error">
                        @_summary.MonthlyExpenses.ToString("C", CultureInfo.GetCultureInfo("pt-BR"))
                    </MudText>
                    <MudText Typo="Typo.caption">
                        @if (_summary.ExpenseChange <= 0)
                        {
                            <span style="color: green">@_summary.ExpenseChange.ToString("F1")%</span>
                        }
                        else
                        {
                            <span style="color: red">+@_summary.ExpenseChange.ToString("F1")%</span>
                        }
                        <span> em relação ao mês anterior</span>
                    </MudText>
                </MudPaper>
            </MudItem>

            <!-- Previsão de Saldo -->
            <MudItem xs="12" md="6">
                <MudPaper Elevation="2" Class="pa-4 my-4 finance-card">
                    <MudText Typo="Typo.subtitle1" Class="mb-2">Previsão de Saldo</MudText>
                    <MudChart ChartType="ChartType.Line" ChartSeries="@_forecastSeries" XAxisLabels="@_forecastLabels" Width="100%" Height="300px"></MudChart>
                </MudPaper>
            </MudItem>

            <!-- Gastos por Categoria -->
            <MudItem xs="12" md="6">
                <MudPaper Elevation="2" Class="pa-4 my-4 finance-card">
                    <MudText Typo="Typo.subtitle1" Class="mb-2">Gastos por Categoria</MudText>
                    <MudChart ChartType="ChartType.Pie" ChartSeries="@_categorySeries" Width="100%" Height="300px" InputData="@_categoryData" InputLabels="@_categoryLabels"></MudChart>
                </MudPaper>
            </MudItem>

            <!-- Ações Rápidas -->
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4 my-4">
                    <MudText Typo="Typo.subtitle1" Class="mb-3">Ações Rápidas</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="3">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="@(() => NavigationManager.NavigateTo("/transacoes/nova"))">
                                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-2" /> Nova Transação
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" OnClick="@(() => NavigationManager.NavigateTo("/orcamentos/novo"))">
                                <MudIcon Icon="@Icons.Material.Filled.AddChart" Class="mr-2" /> Novo Orçamento
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudButton Variant="Variant.Filled" Color="Color.Info" FullWidth="true" OnClick="@(() => NavigationManager.NavigateTo("/relatorios/mensal"))">
                                <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="mr-2" /> Ver Relatórios
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" OnClick="@(() => NavigationManager.NavigateTo("/contas"))">
                                <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Class="mr-2" /> Gerenciar Contas
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>

            <!-- Transações Recentes -->
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4 my-4">
                    <MudText Typo="Typo.subtitle1" Class="mb-3">Transações Recentes</MudText>
                    <MudTable Items="@_recentTransactions" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_isLoading" 
                            LoadingProgressColor="Color.Info" T="RecentTransactionModel">
                        <HeaderContent>
                            <MudTh>Data</MudTh>
                            <MudTh>Descrição</MudTh>
                            <MudTh>Categoria</MudTh>
                            <MudTh>Conta</MudTh>
                            <MudTh>Valor</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Data">@context.Date.ToString("dd/MM/yyyy")</MudTd>
                            <MudTd DataLabel="Descrição">@context.Description</MudTd>
                            <MudTd DataLabel="Categoria">@context.Category</MudTd>
                            <MudTd DataLabel="Conta">@context.Account</MudTd>
                            <MudTd DataLabel="Valor">
                                <span style="@(context.Amount < 0 ? "color: red" : "color: green")">
                                    @context.Amount.ToString("C", CultureInfo.GetCultureInfo("pt-BR"))
                                </span>
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 5, 10, 25 }" />
                        </PagerContent>
                    </MudTable>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private bool _isLoading = true;
    private DashboardSummary _summary = new DashboardSummary();
    private List<RecentTransactionModel> _recentTransactions = new List<RecentTransactionModel>();
    private double[] _categoryData = new double[] { 30, 20, 15, 10, 25 };
    private string[] _categoryLabels = new string[] { "Alimentação", "Moradia", "Transporte", "Lazer", "Outros" };
    private List<ChartSeries> _categorySeries = new List<ChartSeries>();
    private List<ChartSeries> _forecastSeries = new List<ChartSeries>();
    private string[] _forecastLabels = new string[] { "Jan", "Fev", "Mar", "Abr", "Mai", "Jun" };
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            await Task.Delay(1000); // Simula chamada de rede

            // Em um cenário real, estas informações viriam da API
            _summary = await DashboardService.GetDashboardSummaryAsync();
            _recentTransactions = await DashboardService.GetRecentTransactionsAsync(10);
            
            // Configura o gráfico de categorias
            _categorySeries = new List<ChartSeries>
            {
                new ChartSeries { Name = "Gastos por Categoria", Data = _categoryData }
            };
            
            // Configura o gráfico de previsão
            _forecastSeries = new List<ChartSeries>
            {
                new ChartSeries 
                { 
                    Name = "Receitas", 
                    Data = new double[] { 15000, 15200, 15300, 16000, 16200, 16500 } 
                },
                new ChartSeries 
                { 
                    Name = "Despesas", 
                    Data = new double[] { 10000, 10500, 9800, 11000, 10700, 11200 } 
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados do dashboard: {ex.Message}");
            // Tratamento de erro poderia mostrar um Snackbar em caso real
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    public class RecentTransactionModel
    {
        public int Id { get; set; }
        public DateTime Date { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        public string Account { get; set; }
        public decimal Amount { get; set; }
    }
}