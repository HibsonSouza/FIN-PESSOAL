@page "/login"
@layout LoginLayout
@using FinanceManager.ClientApp.Models
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Login - Gerenciador Financeiro</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Elevation="3" Class="pa-6">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Gerenciador Financeiro</MudText>
        <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="mb-6">Faça login para continuar</MudText>
        
        <EditForm Model="@_loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            
            <MudTextField T="string" 
                          @bind-Value="_loginModel.Email" 
                          Label="Email" 
                          Variant="Variant.Outlined" 
                          Class="mb-4"
                          FullWidth="true"
                          Required="true"
                          InputType="InputType.Email"
                          Immediate="true" />
            <ValidationMessage For="@(() => _loginModel.Email)" />
            
            <MudTextField T="string" 
                          @bind-Value="_loginModel.Password" 
                          Label="Senha" 
                          Variant="Variant.Outlined" 
                          Class="mb-4"
                          FullWidth="true"
                          Required="true"
                          InputType="@(_passwordVisible ? InputType.Text : InputType.Password)"
                          Immediate="true"
                          Adornment="Adornment.End" 
                          AdornmentIcon="@(_passwordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)" 
                          OnAdornmentClick="() => _passwordVisible = !_passwordVisible" />
            <ValidationMessage For="@(() => _loginModel.Password)" />
            
            <MudCheckBox @bind-Checked="_loginModel.RememberMe" 
                        Color="Color.Primary" 
                        Label="Lembrar de mim" 
                        Class="mb-4" />
            
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       FullWidth="true" 
                       ButtonType="ButtonType.Submit"
                       Disabled="@_isProcessing" 
                       Class="mb-4">
                @if (_isProcessing)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <span>Processando...</span>
                }
                else
                {
                    <span>Entrar</span>
                }
            </MudButton>
            
            <div class="d-flex justify-space-between align-center mt-4">
                <MudLink Href="/recuperar-senha">Esqueceu a senha?</MudLink>
                <MudLink Href="/registro">Criar uma conta</MudLink>
            </div>
        </EditForm>
        
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4" ShowCloseIcon="true" CloseIconClicked="() => _errorMessage = null">
                @_errorMessage
            </MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private LoginModel _loginModel = new();
    private bool _passwordVisible = false;
    private bool _isProcessing = false;
    private string? _errorMessage = null;
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string? ReturnUrl { get; set; }
    
    protected override void OnInitialized()
    {
        // Apenas para fins de desenvolvimento - remover para produção
        #if DEBUG
        _loginModel.Email = "usuario@teste.com";
        _loginModel.Password = "Senha123!";
        #endif
    }
    
    private async Task HandleLogin()
    {
        _isProcessing = true;
        _errorMessage = null;
        
        try
        {
            var result = await AuthService.Login(_loginModel.Email, _loginModel.Password);
            
            if (result.Success)
            {
                var url = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
                NavigationManager.NavigateTo(url);
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault() ?? "Falha na autenticação. Verifique suas credenciais.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Erro durante o login: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }
}

@code {
    public class LoginLayout : LayoutComponentBase
    {
        protected override void OnInitialized()
        {
            // Layout específico para telas de login/registro
        }
        
        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "login-layout");
            
            builder.OpenElement(2, "main");
            builder.AddContent(3, Body);
            builder.CloseElement(); // main
            
            builder.CloseElement(); // div
        }
    }
}