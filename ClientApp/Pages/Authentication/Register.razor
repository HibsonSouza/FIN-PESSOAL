@page "/register"
@layout Login.EmptyLayout
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center mud-height-full">
    <MudPaper Elevation="3" Class="pa-8 auth-card">
        <MudText Typo="Typo.h4" Class="mb-4" Align="Align.Center">Finance Manager</MudText>
        <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Create an Account</MudText>
        
        <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
            <MudTextField 
                T="string" 
                Label="Full Name" 
                @bind-Value="_model.Name" 
                Required="true" 
                RequiredError="Name is required!"
                Variant="Variant.Outlined" 
                Class="mb-3" />
                
            <MudTextField 
                T="string" 
                Label="Email" 
                @bind-Value="_model.Email" 
                Required="true" 
                RequiredError="Email is required!"
                Validation="@(new EmailAddressAttribute() { ErrorMessage = "That doesn't look like a valid email address" })"
                Variant="Variant.Outlined" 
                Class="mb-3" />
                
            <MudTextField 
                T="string" 
                Label="Password" 
                @bind-Value="_model.Password"
                Required="true" 
                RequiredError="Password is required!"
                Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))"
                Variant="Variant.Outlined"
                InputType="@_passwordInput" 
                Adornment="Adornment.End" 
                AdornmentIcon="@_passwordInputIcon" 
                OnAdornmentClick="TogglePasswordVisibility" 
                Class="mb-3" />
                
            <MudTextField 
                T="string" 
                Label="Confirm Password" 
                @bind-Value="_model.ConfirmPassword"
                Required="true" 
                RequiredError="Please confirm your password!"
                Validation="@(new Func<string, string>(ValidatePasswordMatch))"
                Variant="Variant.Outlined"
                InputType="@_passwordInput" 
                Class="mb-3" />
                
            <MudText Typo="Typo.caption" Class="mb-4">
                By registering, you agree to our Terms of Service and Privacy Policy.
            </MudText>
            
            @if (_isBusy)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-3" />
            }
            
            <MudButton 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                FullWidth="true" 
                Disabled="@(!_success || _isBusy)" 
                OnClick="RegisterAsync" 
                Class="mb-3">Register</MudButton>
            
            <MudDivider Class="my-4" />
            
            <MudText Align="Align.Center">
                Already have an account? <MudLink Href="/login">Sign in</MudLink>
            </MudText>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private RegisterModel _model = new();
    private bool _success;
    private string[] _errors = { };
    private MudForm _form;
    private bool _isBusy = false;
    
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    
    protected override void OnInitialized()
    {
        // If user is already logged in, redirect to dashboard
        if (AuthService.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/");
        }
    }
    
    private async Task RegisterAsync()
    {
        if (!_success)
        {
            Snackbar.Add("Please fill in all required fields correctly.", Severity.Warning);
            return;
        }
        
        _isBusy = true;
        
        try
        {
            var result = await AuthService.RegisterAsync(_model);
            
            if (result.Succeeded)
            {
                Snackbar.Add("Registration successful! You can now log in.", Severity.Success);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                Snackbar.Add(result.ErrorMessage ?? "Registration failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isBusy = false;
        }
    }
    
    private IEnumerable<string> ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            yield return "Password is required!";
        if (password?.Length < 8)
            yield return "Password must be at least 8 characters long!";
        if (!Regex.IsMatch(password ?? "", @"[A-Z]"))
            yield return "Password must contain at least one uppercase letter!";
        if (!Regex.IsMatch(password ?? "", @"[a-z]"))
            yield return "Password must contain at least one lowercase letter!";
        if (!Regex.IsMatch(password ?? "", @"[0-9]"))
            yield return "Password must contain at least one digit!";
    }
    
    private string ValidatePasswordMatch(string confirmPassword)
    {
        if (confirmPassword != _model.Password)
            return "Passwords do not match!";
        return null;
    }
    
    private void TogglePasswordVisibility()
    {
        if (_passwordInput == InputType.Password)
        {
            _passwordInput = InputType.Text;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            _passwordInput = InputType.Password;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
    }
    
    public class RegisterModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; }
        
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }
        
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
        
        [Required(ErrorMessage = "Please confirm your password")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }
}
