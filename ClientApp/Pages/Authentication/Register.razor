@page "/register"
@layout Components.Layout.EmptyLayout
@using FinanceManager.ClientApp.Services.Interfaces
@using FinanceManager.ClientApp.Models

@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<div class="register-container">
    <MudCard Elevation="4" Class="px-4 py-8" Style="width: 100%; max-width: 450px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Gerenciador Financeiro</MudText>
                <MudText Typo="Typo.h5" Align="Align.Center">Criar Conta</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                
                <MudTextField Label="Nome" 
                            @bind-Value="registerModel.Name" 
                            For="@(() => registerModel.Name)"
                            Variant="Variant.Outlined" 
                            Margin="Margin.Dense"
                            FullWidth="true" 
                            Required="true"
                            InputType="InputType.Text"
                            Class="mb-4" />
                
                <MudTextField Label="Email" 
                            @bind-Value="registerModel.Email" 
                            For="@(() => registerModel.Email)"
                            Variant="Variant.Outlined" 
                            Margin="Margin.Dense"
                            FullWidth="true" 
                            Required="true"
                            InputType="InputType.Email"
                            Class="mb-4" />
                
                <MudTextField Label="Senha" 
                            @bind-Value="registerModel.Password" 
                            For="@(() => registerModel.Password)"
                            Variant="Variant.Outlined" 
                            Margin="Margin.Dense"
                            FullWidth="true" 
                            Required="true"
                            InputType="@(_passwordVisible ? InputType.Text : InputType.Password)"
                            Adornment="Adornment.End"
                            AdornmentIcon="@(_passwordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                            OnAdornmentClick="() => _passwordVisible = !_passwordVisible"
                            AdornmentAriaLabel="Mostrar senha"
                            HelperText="Mínimo de 8 caracteres, incluindo letras maiúsculas, minúsculas e números"
                            Class="mb-4" />
                
                <MudTextField Label="Confirmar Senha" 
                            @bind-Value="registerModel.ConfirmPassword" 
                            For="@(() => registerModel.ConfirmPassword)"
                            Variant="Variant.Outlined" 
                            Margin="Margin.Dense"
                            FullWidth="true" 
                            Required="true"
                            InputType="@(_confirmPasswordVisible ? InputType.Text : InputType.Password)"
                            Adornment="Adornment.End"
                            AdornmentIcon="@(_confirmPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                            OnAdornmentClick="() => _confirmPasswordVisible = !_confirmPasswordVisible"
                            AdornmentAriaLabel="Mostrar senha"
                            Class="mb-4" />
                
                <MudText Typo="Typo.caption" Class="mb-4">
                    Ao se registrar, você concorda com nossos <MudLink Href="#" Underline="Underline.Always">Termos de Uso</MudLink> e 
                    <MudLink Href="#" Underline="Underline.Always">Política de Privacidade</MudLink>.
                </MudText>
                
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          ButtonType="ButtonType.Submit" 
                          FullWidth="true"
                          Size="Size.Large"
                          Disabled="@_processing">
                    @if (_processing)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <span>Processando...</span>
                    }
                    else
                    {
                        <span>Criar Conta</span>
                    }
                </MudButton>
                
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-4">@_errorMessage</MudAlert>
                }
            </EditForm>
            
            <MudDivider Class="my-4" />
            
            <MudText Align="Align.Center">
                Já possui uma conta? <MudLink Href="login" Underline="Underline.Always">Faça login</MudLink>
            </MudText>
        </MudCardContent>
    </MudCard>
</div>

<style>
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        padding: 1rem;
    }
</style>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private bool _processing = false;
    private bool _passwordVisible = false;
    private bool _confirmPasswordVisible = false;
    private string _errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        // Verifica se já está autenticado
        if (AuthService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleValidSubmit()
    {
        _processing = true;
        _errorMessage = string.Empty;

        try
        {
            var result = await AuthService.RegisterAsync(registerModel);
            
            if (result.Success)
            {
                Snackbar.Add("Conta criada com sucesso! Por favor, faça login.", Severity.Success);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                _errorMessage = result.Message ?? "Erro ao criar conta. Verifique os dados e tente novamente.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Erro: {ex.Message}";
        }
        finally
        {
            _processing = false;
        }
    }
}