@page "/dashboard-overview"
@using FinanceManager.ClientApp.Models
@using FinanceManager.ClientApp.Services.Interfaces
@inject IDashboardService DashboardService

<PageTitle>Dashboard - Gerenciador Financeiro</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Dashboard</MudText>
    
    <MudGrid>
        <MudItem xs="12" md="6" lg="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 150px;">
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">Saldo Total</MudText>
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="60%" Height="40px" Class="mt-2" />
                }
                else
                {
                    <MudText Typo="Typo.h4" Color="@(dashboardData?.TotalBalance >= 0 ? Color.Success : Color.Error)" Class="mt-2">
                        @FormatCurrency(dashboardData?.TotalBalance ?? 0)
                    </MudText>
                }
                <MudText Typo="Typo.caption" Class="mt-2">
                    Saldo de todas as contas
                </MudText>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 150px;">
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">Receitas (Mês Atual)</MudText>
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="60%" Height="40px" Class="mt-2" />
                }
                else
                {
                    <MudText Typo="Typo.h4" Color="Color.Success" Class="mt-2">
                        @FormatCurrency(dashboardData?.MonthlyIncome ?? 0)
                    </MudText>
                }
                <MudText Typo="Typo.caption" Class="mt-2">
                    Total de receitas no mês corrente
                </MudText>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 150px;">
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">Despesas (Mês Atual)</MudText>
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="60%" Height="40px" Class="mt-2" />
                }
                else
                {
                    <MudText Typo="Typo.h4" Color="Color.Error" Class="mt-2">
                        @FormatCurrency(dashboardData?.MonthlyExpenses ?? 0)
                    </MudText>
                }
                <MudText Typo="Typo.caption" Class="mt-2">
                    Total de despesas no mês corrente
                </MudText>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 150px;">
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">Saldo Mensal</MudText>
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="60%" Height="40px" Class="mt-2" />
                }
                else
                {
                    <MudText Typo="Typo.h4" Color="@(GetMonthlySaldo() >= 0 ? Color.Success : Color.Error)" Class="mt-2">
                        @FormatCurrency(GetMonthlySaldo())
                    </MudText>
                }
                <MudText Typo="Typo.caption" Class="mt-2">
                    Diferença entre receitas e despesas
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
    
    <MudGrid Class="mt-4">
        <MudItem xs="12" md="6">
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Transações Recentes</MudText>
                
                @if (isLoading)
                {
                    @for (int i = 0; i < 5; i++)
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="50px" Class="mb-2" />
                    }
                }
                else if (dashboardData?.RecentTransactions?.Count > 0)
                {
                    <MudList Clickable="true">
                        @foreach (var transaction in dashboardData.RecentTransactions)
                        {
                            <MudListItem Icon="@GetTransactionIcon(transaction.Type)">
                                <div class="d-flex justify-space-between align-center width-100">
                                    <div>
                                        <MudText Typo="Typo.body1">@transaction.Description</MudText>
                                        <MudText Typo="Typo.caption">@transaction.Date.ToString("dd/MM/yyyy")</MudText>
                                    </div>
                                    <MudText Typo="Typo.body1" Color="@(transaction.Type == TransactionType.Income ? Color.Success : Color.Error)">
                                        @FormatCurrency(transaction.Amount)
                                    </MudText>
                                </div>
                            </MudListItem>
                            <MudDivider />
                        }
                    </MudList>
                    
                    <div class="d-flex justify-end mt-3">
                        <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/transacoes">
                            Ver Todas
                            <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Class="ml-1" />
                        </MudButton>
                    </div>
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3">
                        Nenhuma transação registrada nos últimos 30 dias.
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6">
            <MudPaper Elevation="2" Class="pa-4 d-flex flex-column" Style="height: 400px;">
                <MudText Typo="Typo.h6" Class="mb-4">Distribuição de Despesas</MudText>
                
                @if (isLoading)
                {
                    <div class="d-flex justify-center align-center flex-grow-1">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </div>
                }
                else if (dashboardData?.ExpensesByCategory?.Count > 0)
                {
                    <MudChart ChartType="ChartType.Pie" 
                             InputData="@GetCategoryPercentages()"
                             InputLabels="@GetCategoryLabels()"
                             Width="100%" Height="350px" />
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3 flex-grow-1 d-flex align-center justify-center">
                        Nenhuma despesa categorizada registrada no período.
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    
    <MudGrid Class="mt-4">
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">Fluxo de Caixa</MudText>
                    
                    <MudSelect T="string" Value="selectedPeriod" ValueChanged="OnPeriodChanged" Label="Período" 
                              Variant="Variant.Outlined" Dense="true" Style="width: 150px;">
                        <MudSelectItem Value="@("30d")">Últimos 30 dias</MudSelectItem>
                        <MudSelectItem Value="@("90d")">Últimos 3 meses</MudSelectItem>
                        <MudSelectItem Value="@("year")">Este ano</MudSelectItem>
                    </MudSelect>
                </div>
                
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" />
                }
                else if (dashboardData?.CashFlow?.Count > 0)
                {
                    <MudChart ChartType="ChartType.Line" 
                             ChartSeries="@GetCashFlowSeries()"
                             XAxisLabels="@GetCashFlowLabels()"
                             Width="100%" Height="300px" />
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3">
                        Não há dados suficientes para exibir o fluxo de caixa no período selecionado.
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private DashboardViewModel dashboardData;
    private bool isLoading = true;
    private string selectedPeriod = "30d";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardDataAsync();
    }
    
    private async Task LoadDashboardDataAsync()
    {
        isLoading = true;
        
        try
        {
            var dateRange = GetDateRangeFromPeriod(selectedPeriod);
            dashboardData = await DashboardService.GetDashboardDataAsync(dateRange);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados do dashboard: {ex.Message}");
            // Implementar tratamento de erro adequado aqui
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task OnPeriodChanged(string period)
    {
        selectedPeriod = period;
        await LoadDashboardDataAsync();
    }
    
    private MudBlazor.DateRange GetDateRangeFromPeriod(string period)
    {
        var endDate = DateTime.Now;
        DateTime startDate;
        
        switch (period)
        {
            case "90d":
                startDate = endDate.AddDays(-90);
                break;
            case "year":
                startDate = new DateTime(endDate.Year, 1, 1);
                break;
            case "30d":
            default:
                startDate = endDate.AddDays(-30);
                break;
        }
        
        return new DateRange { StartDate = startDate, EndDate = endDate };
    }
    
    private decimal GetMonthlySaldo()
    {
        if (dashboardData == null)
            return 0;
            
        return dashboardData.MonthlyIncome - dashboardData.MonthlyExpenses;
    }
    
    private string FormatCurrency(decimal value)
    {
        return value.ToString("C", new System.Globalization.CultureInfo("pt-BR"));
    }
    
    private string GetTransactionIcon(TransactionType type)
    {
        return type == TransactionType.Income ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward;
    }
    
    private double[] GetCategoryPercentages()
    {
        if (dashboardData?.ExpensesByCategory == null || dashboardData.ExpensesByCategory.Count == 0)
            return new double[] { 100 };
            
        var total = dashboardData.ExpensesByCategory.Sum(c => c.Amount);
        
        return dashboardData.ExpensesByCategory
            .Select(c => Math.Round((double)((c.Amount / total) * 100), 1))
            .ToArray();
    }
    
    private string[] GetCategoryLabels()
    {
        if (dashboardData?.ExpensesByCategory == null || dashboardData.ExpensesByCategory.Count == 0)
            return new string[] { "Sem dados" };
            
        return dashboardData.ExpensesByCategory
            .Select(c => c.Category)
            .ToArray();
    }
    
    private List<ChartSeries> GetCashFlowSeries()
    {
        if (dashboardData?.CashFlow == null || dashboardData.CashFlow.Count == 0)
            return new List<ChartSeries>();
            
        var incomeSeries = new ChartSeries()
        {
            Name = "Receitas",
            Data = dashboardData.CashFlow.Select(cf => (double)cf.Income).ToArray()
        };
        
        var expenseSeries = new ChartSeries()
        {
            Name = "Despesas",
            Data = dashboardData.CashFlow.Select(cf => (double)cf.Expenses).ToArray()
        };
        
        return new List<ChartSeries> { incomeSeries, expenseSeries };
    }
    
    private string[] GetCashFlowLabels()
    {
        if (dashboardData?.CashFlow == null || dashboardData.CashFlow.Count == 0)
            return new string[] { };
            
        return dashboardData.CashFlow
            .Select(cf => cf.Period)
            .ToArray();
    }
}