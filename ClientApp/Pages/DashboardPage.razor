@page "/dashboard-overview"
@using FinanceManager.ClientApp.Models
@using FinanceManager.ClientApp.Services.Interfaces
@using MudBlazor.Charts
@inject IDashboardService DashboardService
@inject ISnackbar Snackbar
@attribute [Authorize]

<PageTitle>Dashboard - Gerenciador Financeiro</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Dashboard</MudText>
    
    <!-- Resumo financeiro -->
    <MudGrid>
        <MudItem xs="12" md="6" lg="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 150px;">
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">Saldo Total</MudText>
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="60%" Height="40px" Class="mt-2" />
                }
                else
                {
                    <MudText Typo="Typo.h4" Color="@(dashboardData?.TotalBalance >= 0 ? Color.Success : Color.Error)" Class="mt-2">
                        @FormatCurrency(dashboardData?.TotalBalance ?? 0)
                    </MudText>
                }
                <MudText Typo="Typo.caption" Class="mt-2">
                    Saldo de todas as contas
                </MudText>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 150px;">
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">Receitas (Mês Atual)</MudText>
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="60%" Height="40px" Class="mt-2" />
                }
                else
                {
                    <MudText Typo="Typo.h4" Color="Color.Success" Class="mt-2">
                        @FormatCurrency(dashboardData?.MonthlyIncome ?? 0)
                    </MudText>
                }
                <MudText Typo="Typo.caption" Class="mt-2">
                    Total de receitas no mês corrente
                </MudText>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 150px;">
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">Despesas (Mês Atual)</MudText>
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="60%" Height="40px" Class="mt-2" />
                }
                else
                {
                    <MudText Typo="Typo.h4" Color="Color.Error" Class="mt-2">
                        @FormatCurrency(dashboardData?.MonthlyExpenses ?? 0)
                    </MudText>
                }
                <MudText Typo="Typo.caption" Class="mt-2">
                    Total de despesas no mês corrente
                </MudText>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 150px;">
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">Saldo Mensal</MudText>
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="60%" Height="40px" Class="mt-2" />
                }
                else
                {
                    <MudText Typo="Typo.h4" Color="@(dashboardData?.MonthlySavings >= 0 ? Color.Success : Color.Error)" Class="mt-2">
                        @FormatCurrency(dashboardData?.MonthlySavings ?? 0)
                    </MudText>
                    <MudText Typo="Typo.caption" Color="@(dashboardData?.MonthlySavings >= 0 ? Color.Success : Color.Error)">
                        @(dashboardData?.MonthlySavingsPercentage.ToString("F1"))% da receita
                    </MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    
    <!-- Segunda linha: gráficos e transações recentes -->
    <MudGrid Class="mt-4">
        <!-- Transações recentes -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">Transações Recentes</MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/transacoes">
                        Ver todas
                        <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Class="ml-1" />
                    </MudButton>
                </div>
                
                @if (isLoading)
                {
                    @for (int i = 0; i < 5; i++)
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="50px" Class="mb-2" />
                    }
                }
                else if (dashboardData?.RecentTransactions?.Count > 0)
                {
                    <MudList Clickable="true">
                        @foreach (var transaction in dashboardData.RecentTransactions)
                        {
                            <MudListItem Icon="@GetTransactionIcon(transaction.Type)">
                                <div class="d-flex justify-space-between align-center width-100">
                                    <div>
                                        <MudText Typo="Typo.body1">@transaction.Description</MudText>
                                        <MudText Typo="Typo.caption">@transaction.Date.ToString("dd/MM/yyyy")</MudText>
                                    </div>
                                    <MudText Typo="Typo.body1" Color="@(transaction.Type == TransactionType.Income ? Color.Success : Color.Error)">
                                        @FormatCurrency(transaction.Amount)
                                    </MudText>
                                </div>
                            </MudListItem>
                            <MudDivider />
                        }
                    </MudList>
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3">
                        Nenhuma transação registrada nos últimos 30 dias.
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
        
        <!-- Gráfico de despesas por categoria -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="2" Class="pa-4 d-flex flex-column" Style="height: 400px;">
                <MudText Typo="Typo.h6" Class="mb-4">Distribuição de Despesas</MudText>
                
                @if (isLoading)
                {
                    <div class="d-flex justify-center align-center flex-grow-1">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </div>
                }
                else if (dashboardData?.ExpensesByCategoryData?.Categories?.Length > 0)
                {                    <MudChart ChartType="MudBlazor.ChartType.Pie" 
                              InputData="@GetCategoryPercentages()"
                              InputLabels="@GetCategoryLabels()"
                              Width="100%" Height="350px" />
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3 flex-grow-1 d-flex align-center justify-center">
                        Nenhuma despesa categorizada registrada no período.
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    
    <!-- Terceira linha: gráfico de fluxo de caixa -->
    <MudGrid Class="mt-4">
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">Fluxo de Caixa</MudText>
                    
                    <MudSelect T="string" Value="selectedPeriod" ValueChanged="OnPeriodChanged" Label="Período" 
                               Variant="Variant.Outlined" Dense="true" Style="width: 150px;">
                        <MudSelectItem Value="@("30d")">Últimos 30 dias</MudSelectItem>
                        <MudSelectItem Value="@("90d")">Últimos 3 meses</MudSelectItem>
                        <MudSelectItem Value="@("year")">Este ano</MudSelectItem>
                    </MudSelect>
                </div>
                
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" />
                }
                else if (dashboardData?.IncomeVsExpensesData?.Labels?.Length > 0)
                {                    <MudChart ChartType="MudBlazor.ChartType.Line" 
                              ChartSeries="@GetCashFlowSeries()"
                              XAxisLabels="@GetCashFlowLabels()"
                              Width="100%" Height="300px" />
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3">
                        Não há dados suficientes para exibir o fluxo de caixa no período selecionado.
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    
    <!-- Quarta linha: orçamentos e metas -->
    <MudGrid Class="mt-4">
        <!-- Progresso de orçamentos -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">Progresso de Orçamentos</MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/budgets">
                        Gerenciar
                        <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Class="ml-1" />
                    </MudButton>
                </div>
                
                @if (isLoading)
                {
                    @for (int i = 0; i < 3; i++)
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="50px" Class="mb-2" />
                    }
                }
                else if (dashboardData?.BudgetProgress?.Count > 0)
                {
                    <MudList>
                        @foreach (var budget in dashboardData.BudgetProgress.Take(4))
                        {
                            <MudListItem DisableRipple="true" Class="px-0">
                                <div style="width: 100%;">
                                    <div class="d-flex justify-space-between mb-1">
                                        <MudText Typo="Typo.body2">
                                            <span class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" 
                                                         Style="@($"color: {budget.CategoryColor};")" Class="mr-1" />
                                                @budget.Name
                                            </span>
                                        </MudText>
                                        <MudText Typo="Typo.body2" 
                                                 Color="@(budget.IsOverBudget ? Color.Error : Color.Default)">
                                            @FormatCurrency(budget.CurrentSpent) / @FormatCurrency(budget.BudgetAmount)
                                        </MudText>
                                    </div>
                                    <MudProgressLinear Color="@GetBudgetProgressColor(budget.PercentageUsed, budget.IsOverBudget)" 
                                                      Value="@((double)budget.PercentageUsed)" 
                                                      Class="my-1" />
                                    <MudText Typo="Typo.caption" Class="d-flex justify-space-between">
                                        <span>@budget.PercentageUsed.ToString("F1")%</span>
                                        <span class="@(budget.IsOverBudget ? "mud-error-text" : "")">
                                            @(budget.IsOverBudget 
                                                ? $"Ultrapassado em {FormatCurrency(Math.Abs(budget.RemainingAmount))}" 
                                                : $"Restante: {FormatCurrency(budget.RemainingAmount)}")
                                        </span>
                                    </MudText>
                                </div>
                            </MudListItem>
                            <MudDivider Class="my-2" />
                        }
                    </MudList>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">
                        Nenhum orçamento definido. Clique em "Gerenciar" para criar orçamentos.
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
        
        <!-- Metas de economia -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">Metas de Economia</MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/goals">
                        Gerenciar
                        <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Class="ml-1" />
                    </MudButton>
                </div>
                
                @if (isLoading)
                {
                    @for (int i = 0; i < 3; i++)
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="60px" Class="mb-2" />
                    }
                }
                else if (savingsGoals?.Count() > 0)
                {
                    <MudList>
                        @foreach (var goal in savingsGoals.Take(3))
                        {
                            <MudListItem DisableRipple="true" Class="px-0">
                                <div style="width: 100%;">
                                    <div class="d-flex justify-space-between mb-1">
                                        <MudText Typo="Typo.body2">
                                            <span class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.Flag" Size="Size.Small" 
                                                         Style="@($"color: {goal.Color ?? "#9c27b0"};")" Class="mr-1" />
                                                @goal.Name
                                            </span>
                                        </MudText>
                                        <MudText Typo="Typo.body2">
                                            @FormatCurrency(goal.CurrentAmount) / @FormatCurrency(goal.TargetAmount)
                                        </MudText>
                                    </div>
                                    <MudProgressLinear Color="Color.Success" 
                                                       Value="@goal.PercentComplete" 
                                                       Class="my-1" />
                                    <MudText Typo="Typo.caption" Class="d-flex justify-space-between">
                                        <span>@goal.PercentComplete.ToString("F1")%</span>
                                        <span>
                                            @if(goal.TargetDate.HasValue)
                                            {
                                                <span>Meta: @goal.TargetDate.Value.ToString("dd/MM/yyyy")</span>
                                            }
                                        </span>
                                    </MudText>
                                </div>
                            </MudListItem>
                            <MudDivider Class="my-2" />
                        }
                    </MudList>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">
                        Nenhuma meta de economia definida. Clique em "Gerenciar" para criar metas.
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    
    <!-- Quinta linha: contas -->
    <MudGrid Class="mt-4">
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">Resumo de Contas</MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/accounts">
                        Gerenciar Contas
                        <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Class="ml-1" />
                    </MudButton>
                </div>
                
                @if (isLoading)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" />
                }
                else if (dashboardData?.AccountsSummary?.Count > 0)
                {
                    <div class="d-flex flex-wrap gap-4">
                        @foreach (var account in dashboardData.AccountsSummary)
                        {
                            <MudPaper Elevation="0" Outlined="true" Class="pa-3" Style="min-width: 200px; position: relative;">
                                <div class="d-flex flex-column">
                                    <MudText Typo="Typo.subtitle2" Style="@($"color: {account.Color ?? "#1e88e5"};")">
                                        @account.Name
                                    </MudText>
                                    <MudText Typo="Typo.caption">@account.BankName (@account.Type)</MudText>
                                    <MudText Typo="Typo.h6" Class="mt-2" Color="@(account.Balance >= 0 ? Color.Default : Color.Error)">
                                        @FormatCurrency(account.Balance)
                                    </MudText>
                                </div>
                                <MudLink Href="@($"/accounts/{account.Id}")" Underline="Underline.None">
                                    <MudIcon Icon="@Icons.Material.Filled.OpenInNew" 
                                             Style="position: absolute; top: 8px; right: 8px; font-size: 16px;" />
                                </MudLink>
                            </MudPaper>
                        }
                    </div>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">
                        Nenhuma conta cadastrada. Adicione contas para visualizar seu saldo aqui.
                    </MudAlert>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private DashboardViewModel? dashboardData;
    private IEnumerable<SavingsGoalProgress>? savingsGoals;
    private bool isLoading = true;
    private string selectedPeriod = "30d";

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardDataAsync();
    }

    private async Task LoadDashboardDataAsync()
    {
        isLoading = true;

        try
        {
            var dateRange = GetDateRangeFromPeriod(selectedPeriod);
            dashboardData = await DashboardService.GetDashboardDataAsync(dateRange);
            savingsGoals = await DashboardService.GetSavingsGoalsProgressAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar dados do dashboard: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private DateTimeRange GetDateRangeFromPeriod(string period)
    {
        var endDate = DateTime.Now;
        DateTime startDate;

        switch (period)
        {
            case "90d":
                startDate = endDate.AddDays(-90);
                break;
            case "year":
                startDate = new DateTime(endDate.Year, 1, 1);
                break;
            case "30d":
            default:
                startDate = endDate.AddDays(-30);
                break;
        }

        return new DateTimeRange(startDate, endDate);
    }

    private string FormatCurrency(decimal value)
    {
        // Implementação básica, idealmente viria de um serviço de localização/configuração
        return value.ToString("C", new System.Globalization.CultureInfo("pt-BR"));
    }    private async Task OnPeriodChanged(string newPeriod)
    {
        selectedPeriod = newPeriod;
        await LoadDashboardDataAsync();
        Snackbar.Add($"Período do gráfico alterado para: {newPeriod}", Severity.Info);
    }

    // Métodos adicionados para resolver erros de compilação
    private string GetTransactionIcon(TransactionType type)
    {
        // Implementação de placeholder
        return type == TransactionType.Income ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward;
    }    private double[] GetCategoryPercentages()
    {
        // Implementação baseada na estrutura real do modelo
        if (dashboardData?.ExpensesByCategoryData?.Amounts != null && dashboardData.ExpensesByCategoryData.Amounts.Any())
        {
            return dashboardData.ExpensesByCategoryData.Amounts.Select(a => (double)a).ToArray();
        }
        return new double[] { 100 }; // Exemplo
    }

    private string[] GetCategoryLabels()
    {
        // Implementação baseada na estrutura real do modelo
        if (dashboardData?.ExpensesByCategoryData?.Categories != null && dashboardData.ExpensesByCategoryData.Categories.Any())
        {
            return dashboardData.ExpensesByCategoryData.Categories.ToArray();
        }
        return new string[] { "N/A" }; // Exemplo
    }

    private List<ChartSeries> GetCashFlowSeries()
    {
        // Implementação baseada na estrutura real do modelo
        if (dashboardData?.IncomeVsExpensesData?.IncomeData != null && dashboardData.IncomeVsExpensesData.ExpensesData != null)
        {
            return new List<ChartSeries>
            {
                new ChartSeries 
                { 
                    Name = "Receitas", 
                    Data = dashboardData.IncomeVsExpensesData.IncomeData.Select(d => (double)d).ToArray() 
                },
                new ChartSeries 
                { 
                    Name = "Despesas", 
                    Data = dashboardData.IncomeVsExpensesData.ExpensesData.Select(d => (double)d).ToArray() 
                }
            };
        }
        return new List<ChartSeries>
        {
            new ChartSeries { Name = "Receitas", Data = new double[] { 0 } },
            new ChartSeries { Name = "Despesas", Data = new double[] { 0 } }
        };
    }

    private string[] GetCashFlowLabels()
    {
        // Implementação baseada na estrutura real do modelo
        if (dashboardData?.IncomeVsExpensesData?.Labels != null)
        {
            return dashboardData.IncomeVsExpensesData.Labels.ToArray();
        }
        return new string[] { "N/A" };
    }

    private Color GetBudgetProgressColor(double percentage, bool isOverBudget)
    {
        // Implementação de placeholder
        if (isOverBudget) return Color.Error;
        if (percentage > 80) return Color.Warning;
        return Color.Success;
    }
}